assign_id(){

    sha256="$1"

    new_id="$(echo -n "$sha256" | dd bs=64 count=1 2>/dev/null | sha256sum - | cut -d' ' -f1)"
}

basher_layers() {

    ATOMIC_TARGET_DIR="$1"
    TARGET_DIR="$2"

    REPO="workinright/openpilot-base"
    TAG="latest"
    IMAGE="ghcr.io/$REPO"

    sudo bash -c "ATOMIC_TARGET_DIR="$ATOMIC_TARGET_DIR" ; mkdir -p "$ATOMIC_TARGET_DIR" ; mount -t tmpfs -o size=32G tmpfs "$ATOMIC_TARGET_DIR" ; chmod 744 "$ATOMIC_TARGET_DIR" ; mkdir -p "$ATOMIC_TARGET_DIR/image/overlay2/l" \
    mkdir -p "$ATOMIC_TARGET_DIR/image/overlay2/distribution/diffid-by-digest/sha256" \
    mkdir -p "$ATOMIC_TARGET_DIR/image/overlay2/distribution/v2metadata-by-diffid/sha256" \
    mkdir -p "$ATOMIC_TARGET_DIR/image/overlay2/layerdb/sha256" \
    mkdir -p "$ATOMIC_TARGET_DIR/image/overlay2/imagedb/content/sha256" \
    mkdir -p "$ATOMIC_TARGET_DIR/image/overlay2/layerdb/tmp" \
    mkdir -p "$ATOMIC_TARGET_DIR/overlay2/l"" &
    pid0=$!

    sudo bash -c "TARGET_DIR="$TARGET_DIR" ; systemctl stop docker >/dev/null 2>&1; rm -rf "$TARGET_DIR" ; mkdir -p "$TARGET_DIR" ; chmod 744 "$TARGET_DIR"" &
    stop_docker_pid=$!

    echo "Requesting Bearer token from the registry..."
    TOKEN="$(curl -L -s "https://ghcr.io/token?scope=repository:$REPO:pull" | jq -r .token)"

    echo "Fetching manifest for $IMAGE:$TAG"
    MANIFEST="$(curl -L -s -H "Authorization: Bearer $TOKEN" \
    -H "Accept: application/vnd.oci.image.manifest.v1+json,application/vnd.docker.distribution.manifest.v2+json" \
    "https://ghcr.io/v2/$REPO/manifests/$TAG")"

    echo $MANIFEST

    # Calculate SHA256 of the manifest
    MANIFEST_DIGEST="$(echo -n "$MANIFEST" | sha256sum - | cut -d ' ' -f1)"

    echo "Manifest digest: sha256:$MANIFEST_DIGEST"

    # Download config blob
    CONFIG_DIGEST="$(echo -n "$MANIFEST" | jq -r .config.digest | cut -d ':' -f2)"
    echo "Downloading config blob: sha256:$CONFIG_DIGEST"

    CONFIG="$(curl -L -s -H "Authorization: Bearer $TOKEN" \
    "https://ghcr.io/v2/$REPO/blobs/sha256:$CONFIG_DIGEST")"

    # Download each layer
    echo "Downloading layer blobs..."    

    wait $pid0

    manifest_sha256="$(echo -n "$MANIFEST" | jq -r '.config.digest' | cut -d':' -f2)"
    if ! [ -e "$ATOMIC_TARGET_DIR/image/overlay2/imagedb/content/sha256/$manifest_sha256" ]
    then
        echo -n "$CONFIG" > "$ATOMIC_TARGET_DIR/image/overlay2/imagedb/content/sha256/$(basename "$manifest_sha256")"
    else
        echo "error: the image is already there"
        exit 2
    fi

    layers="$(echo -n "$MANIFEST" | jq -r '.layers[]' | tr -d '\n' | sed 's/}/} \n/g')"

    i=0
    prev_sha256=
    prev_chain_id=
    prev_new_ids=
    prev_new_ids2=
    declare -a tmp_dirs
    declare -a sha256s
    declare -a pids
    while read layer
    do
        sha256="$(echo -n "$layer" | jq -r '.digest' | cut -d':' -f2)"
        mediaType="$(echo -n "$layer" | jq -r '.mediaType')"
        echo mediaType "$mediaType"

        tmp_dir=$(($$+i))

        # TODO detect zstd/pigz/pixz
        mkdir -p "$ATOMIC_TARGET_DIR/$tmp_dir"
        # TODO -D >(cat - | grep Content-Length) 
        (
            mediaType1="$mediaType" ; tmp_dir="$tmp_dir" ; TOKEN1="$TOKEN" ; REPO1="$REPO"; sha2561="$sha256" ; new_id1="$new_id"

            #mkfifo "$ATOMIC_TARGET_DIR/$sha2561" ;
            #-D "$ATOMIC_TARGET_DIR/$sha2561"
            sha256="$(mediaType2="$mediaType1" ; curl -L -s -H "Authorization: Bearer $TOKEN1" \
                "https://ghcr.io/v2/$REPO1/blobs/sha256:$sha2561" | \
                    #{ head -c 2 | grep -a -q -P '^1f8b' && echo pigz >/dev/stderr ; pigz -d || echo none > /dev/stderr ; cat -; } \
                    { f2b="$(head -c 2 | xxd -p)"; echo -n "$f2b" | grep -q '^1f8b' && cat <(echo -n "$f2b" | xxd -r -p) - | pigz -d || cat <(echo -n "$f2b" | xxd -r -p) -; } \
 \
                 | tee >(tar -xf - -C "$ATOMIC_TARGET_DIR/$tmp_dir") | sha256sum - | cut -d' ' -f1 )" ; mv "$ATOMIC_TARGET_DIR/$tmp_dir" "$ATOMIC_TARGET_DIR/${sha2561}_$sha256") &
        pids+=($!)

        
        tmp_dirs+=($var)
        sha256s+=($sha256)

        ((++i))
    done <<< "$layers"

    for pid in ${pids[@]}
    do
        #echo waiting for $pid
        wait $pid
    done

    i=0
    while read layer
    do
        orgsha256=${sha256s[$i]}
        var=${tmp_dirs[$i]}

        _src=$ATOMIC_TARGET_DIR/${orgsha256}_*
        newsha256="$(echo -n $_src | cut -d' ' -f1 | cut -d'_' -f2)"

        assign_id "$newsha256"

        mkdir -p "$ATOMIC_TARGET_DIR/overlay2/$new_id"
        mv "$ATOMIC_TARGET_DIR/${orgsha256}_${newsha256}" "$ATOMIC_TARGET_DIR/overlay2/$new_id/diff"

        basher_layer
        ((++i))
    done <<< "$layers"

    wait $stop_docker_pid

    echo -n "{\"Repositories\":{\"openpilot-base\":{\"openpilot-base:latest\":\"sha256:$CONFIG_DIGEST\"}}}" | sudo tee $ATOMIC_TARGET_DIR/image/overlay2/repositories.json &>/dev/null
    sudo bash -c "mount --bind "$ATOMIC_TARGET_DIR" "$TARGET_DIR""
    sudo systemctl start docker #&
}

basher_layer() {

    if [ $i = 0 ]
    then
        prev_new_ids="$new_id"
    else
        prev_new_ids="$prev_new_ids:$new_id"
    fi

    new_id2="$(echo -n "$prev_new_ids" | sha256sum | cut -d' ' -f1 | base64 -w 0 | tr +/ -_ | cut -c1-26)"

    if [ $i = 0 ]
    then
        chain_id="$sha256"
    else
        chain_id="$(echo -n "sha256:$chain_id sha256:$sha256" | sha256sum - | cut -d' ' -f1)"
    fi

    # TODO
    #if [ -e "$ATOMIC_TARGET_DIR/overlay2/$new_id" ] ||
    if [ -e "$ATOMIC_TARGET_DIR/image/overlay2/layerdb/sha256/$chain_id" ]
    then
        echo "error: the file or directory is already there"
        exit 3
    fi
    
    mkdir -p "$ATOMIC_TARGET_DIR/overlay2/$new_id/diff"
    mkdir -p "$ATOMIC_TARGET_DIR/overlay2/$new_id/work"

    echo -n "$new_id2" > "$ATOMIC_TARGET_DIR/overlay2/$new_id/link"
    ln -s "../$new_id/diff" "$ATOMIC_TARGET_DIR/overlay2/l/$new_id2"

    if [ $i = 0 ]
    then
        prev_new_ids2="l/$new_id2"
    else
        echo -n "$prev_new_ids2" > "$ATOMIC_TARGET_DIR/overlay2/$new_id/lower"
    
        prev_new_ids2="$prev_new_ids2:l/$new_id2"
    fi

    if [ "$i" = 1 ]
    then
        touch "$ATOMIC_TARGET_DIR/overlay2/$new_id/committed"
    fi

    mkdir -p "$ATOMIC_TARGET_DIR/image/overlay2/layerdb/sha256/$chain_id"
    
    echo -n "$new_id" > "$ATOMIC_TARGET_DIR/image/overlay2/layerdb/sha256/$chain_id/cache-id"
    
    #cat "$ATOMIC_TARGET_DIR/${orgsha256}_size" > "$ATOMIC_TARGET_DIR/image/overlay2/layerdb/sha256/$chain_id/size" 2>/dev/null
    # TODO
    echo -n "0" > "$ATOMIC_TARGET_DIR/image/overlay2/layerdb/sha256/$chain_id/size"
    rm -f "$ATOMIC_TARGET_DIR/${orgsha256}_size"

    echo -n "sha256:$sha256" > "$ATOMIC_TARGET_DIR/image/overlay2/layerdb/sha256/$chain_id/diff"

    if [ "$i" != 0 ]
    then
        echo -n "sha256:$sha256" > "$ATOMIC_TARGET_DIR/image/overlay2/layerdb/sha256/$chain_id/diff"
        echo -n "sha256:$prev_chain_id" > "$ATOMIC_TARGET_DIR/image/overlay2/layerdb/sha256/$chain_id/parent"
    fi

    echo -n "[{\"Digest\":\"sha256:$sha256\",\"SourceRepository\":\"ghcr.io/workinright/openpilot-base\",\"HMAC\":\"\"}]" \
        > "$ATOMIC_TARGET_DIR/image/overlay2/distribution/v2metadata-by-diffid/sha256/$sha256"
    
    echo -n "sha256:$sha256" > "$ATOMIC_TARGET_DIR/image/overlay2/distribution/diffid-by-digest/sha256/$sha256"
    
    prev_sha256="$sha256"
    prev_chain_id="$chain_id"
}
