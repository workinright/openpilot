#!/usr/bin/env bash
#set -e

#if [ $# -lt 2 ]
#then
#    echo "usage: $0 SOURCE_DIR TARGET_DIR"
#    exit 1
#fi

assign_id() {

    sha256="$1"
    new_id="$(echo -n "$sha256" | dd bs=64 count=1 2>/dev/null | sha256sum - | cut -d' ' -f1)"

}

basher_glob() {

    MANIFEST="$(echo -n "$1" | base64 -d)"
    CONFIG="$(echo -n "$2" | base64 -d)"
    TARGET_DIR="$3"

    #echo SOURCE_DIR "$SOURCE_DIR"
    #echo TARGET_DIR "$TARGET_DIR"

    mkdir -p "$TARGET_DIR/image/overlay2/l"
    mkdir -p "$TARGET_DIR/image/overlay2/distribution/diffid-by-digest/sha256"
    mkdir -p "$TARGET_DIR/image/overlay2/distribution/v2metadata-by-diffid/sha256"
    mkdir -p "$TARGET_DIR/image/overlay2/layerdb/sha256"
    mkdir -p "$TARGET_DIR/image/overlay2/imagedb/content/sha256"
    mkdir -p "$TARGET_DIR/image/overlay2/layerdb/tmp"
    mkdir -p "$TARGET_DIR/overlay2/l"

    #docker_patch1/image/overlay2/repositories.json # not required, keeps tags
    #echo -n "$MANIFEST"
    manifest_sha256="$(echo -n "$MANIFEST" | jq -r '.config.digest' | cut -d':' -f2)"
    if ! [ -e "$TARGET_DIR/image/overlay2/imagedb/content/sha256/$manifest_sha256" ]
    then
        echo -n "$CONFIG" > "$TARGET_DIR/image/overlay2/imagedb/content/sha256/$(basename "$manifest_sha256")"
    else
        echo "error: the image is already there"
        exit 2
    fi

}

basher_layers() {

    MANIFEST="$(echo -n "$1" | base64 -d)"
    TARGET_DIR="$2"

    sudo bash -c "systemctl stop docker ; rm -rf /var/lib/docker ; mkdir /var/lib/docker ; chmod 744 /var/lib/docker" &
    stop_docker_pid=$!

    i=0
    prev_sha256=
    prev_chain_id=
    prev_new_ids=
    prev_new_ids2=
    declare -a sth1
    declare -a sth2
    declare -a pids
    while read layer
    do
        sha256="$(echo -n "$layer" | cut -d':' -f2 )"
        

        #echo SOURCE_DIR $SOURCE_DIR
        #echo TARGET_DIR $TARGET_DIR

        #echo start

        var=$(($$+i))

        echo presha "$sha256"
        mkdir -p $TARGET_DIR/$var
        ( var="$var" ; TOKEN1="$TOKEN" ; REPO1="$REPO"; sha2561="$sha256" ; new_id1="$new_id" ; sha256="$(curl -L -s -H "Authorization: Bearer $TOKEN1" \
        "https://ghcr.io/v2/$REPO1/blobs/sha256:$sha2561" \
        | pigz -d | tee >(tar -xf - -C $TARGET_DIR/$var) | sha256sum - | cut -d' ' -f1 )" ; mv "$TARGET_DIR/$var" "$TARGET_DIR/${sha2561}_$sha256" ) &
        pids+=($!)

        echo postsha "$sha256"

        
        sth1+=($var)
        sth2+=($sha256)

        ((++i))
    done < <(echo -n "$MANIFEST" | jq -r '.layers[].digest')

    for pid in ${pids[@]}
    do
        #echo waiting for
        wait $pid
    done

    i=0
    while read layer
    do
        sha256=${sth2[$i]}
        var=${sth1[$i]}

        echo orgsha $sha256
        _src=$TARGET_DIR/$sha256_*
        newsha256="$(echo -n $_src | cut -d' ' -f1 | cut -d'_' -f2)"
        echo oldsha $sha256 newsha $newsha256

        assign_id "$newsha256"

        rmdir "$TARGET_DIR/overlay2/$new_id/diff"
        mkdir -p "$TARGET_DIR/overlay2/$new_id"
        mv "$TARGET_DIR/${sha256}_${newsha256}" "$TARGET_DIR/overlay2/$new_id/diff"

        basher_layer

       # 

        #echo started pid ${pids[@]}
        ((++i))
    done < <(echo -n "$MANIFEST" | jq -r '.layers[].digest')

    wait $stop_docker_pid

    #echo pids ${pids[@]}

    #

    echo -n "{\"Repositories\":{\"openpilot-base\":{\"openpilot-base:latest\":\"sha256:$CONFIG_DIGEST\"}}}" | sudo tee /var/lib/docker2/image/overlay2/repositories.json &>/dev/null
    sudo bash -c "mount --bind /var/lib/docker2 /var/lib/docker"
    sudo systemctl start docker #&
    #sudo dockerd -D -l debug --log-driver none &
    #pid1=$!

    #sleep 10

    #docker images

    #docker run openpilot-base:latest bash

    #wait $pid1

    #docker images
}

basher_layer() {

    if [ $i = 0 ]
    then
        prev_new_ids="$new_id"
    else
        prev_new_ids="$prev_new_ids:$new_id"
    fi

    new_id2="$(echo -n "$prev_new_ids" | sha256sum | cut -d' ' -f1 | base64 -w 0 | tr +/ -_ | cut -c1-26)"
    #echo $new_id2

    if [ $i = 0 ]
    then
        chain_id="$sha256"
    else
        chain_id="$(echo -n "sha256:$chain_id sha256:$sha256" | sha256sum - | cut -d' ' -f1)"
    fi
    #echo "final $chain_id"

    #if [ -e "$TARGET_DIR/overlay2/$new_id" ] ||
    if [ -e "$TARGET_DIR/image/overlay2/layerdb/sha256/$chain_id" ]
    then
        echo "error: the file or directory is already there"
        exit 3
    fi
    
    mkdir -p "$TARGET_DIR/overlay2/$new_id/diff"
    mkdir -p "$TARGET_DIR/overlay2/$new_id/work"

    echo -n "$new_id2" > "$TARGET_DIR/overlay2/$new_id/link"
    ln -s "../$new_id/diff" "$TARGET_DIR/overlay2/l/$new_id2"

    if [ $i = 0 ]
    then
        prev_new_ids2="l/$new_id2"
    else
        echo -n "$prev_new_ids2" > "$TARGET_DIR/overlay2/$new_id/lower"
    
        prev_new_ids2="$prev_new_ids2:l/$new_id2"
    fi

    #tar -xf "$SOURCE_DIR/$layer" -C "$TARGET_DIR/overlay2/$new_id/diff/"

    if [ "$i" = 1 ]
    then
        touch "$TARGET_DIR/overlay2/$new_id/committed"
    fi

    #chain_id=
    #if [ "$i" = 0 ]
    #then
    #    chain_id="$sha256"
    #else
    #    chain_id="$new_id"
    #fi

    mkdir -p "$TARGET_DIR/image/overlay2/layerdb/sha256/$chain_id"
    
    echo -n "$new_id" > "$TARGET_DIR/image/overlay2/layerdb/sha256/$chain_id/cache-id"
    
    #TODO
    #echo -n "$(du -b "$SOURCE_DIR/$layer" | cut -f1)" > "$TARGET_DIR/image/overlay2/layerdb/sha256/$chain_id/size"
    echo -n 10000 > "$TARGET_DIR/image/overlay2/layerdb/sha256/$chain_id/size"

    echo -n "sha256:$sha256" > "$TARGET_DIR/image/overlay2/layerdb/sha256/$chain_id/diff"

    if [ "$i" != 0 ]
    then
        echo -n "sha256:$sha256" > "$TARGET_DIR/image/overlay2/layerdb/sha256/$chain_id/diff"
        echo -n "sha256:$prev_chain_id" > "$TARGET_DIR/image/overlay2/layerdb/sha256/$chain_id/parent"
    fi

    #echo "tarsplit" > "$TARGET_DIR/image/overlay2/layerdb/sha256/$chain_id/tar-split.json.gz"

    echo -n "[{\"Digest\":\"sha256:$sha256\",\"SourceRepository\":\"ghcr.io/workinright/openpilot-base\",\"HMAC\":\"\"}]" \
        > "$TARGET_DIR/image/overlay2/distribution/v2metadata-by-diffid/sha256/$sha256"
    
    echo -n "sha256:$sha256" > "$TARGET_DIR/image/overlay2/distribution/diffid-by-digest/sha256/$sha256"
    
    prev_sha256="$sha256"
    prev_chain_id="$chain_id"

}

#basher_glob "$1" "$2"
#basher_layers "$1" "$2"
